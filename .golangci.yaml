# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  concurrency: 4
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 2
  # Include test files or not.
  # Default: true
  tests: false
  # List of build tags, all linters use it.
  # Default: [].
  build-tags: []
  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  exclude-dirs-use-default: false
  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-files: []
  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: mod
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false
  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  go: "1.22"

linters:
  # Enable presets.
  # https://golangci-lint.run/usage/linters
  presets:
    - bugs
    - comment
    - complexity
    - error
    - format
    - import
    - metalinter
    - module
    - performance
    - sql
    - style
    - test
    - unused
  disable:
    # - asasalint
    # - asciicheck
    # - bidichk
    # - bodyclose
    # - containedctx
    # - contextcheck
    # - cyclop
    # - deadcode
    # - decorder
    - depguard
    # - dogsled
    - dupl
    # - dupword
    # - durationcheck
    # - errcheck
    # - errchkjson
    # - errname
    # - errorlint
    # - execinquery
    # - exhaustive
    # - exhaustivestruct
    # - exhaustruct
    # - exportloopref
    # - forbidigo
    # - forcetypeassert
    - funlen
    # - gci
    # - ginkgolinter
    # - gocheckcompilerdirectives
    # - gochecknoglobals
    - gochecknoinits
    # - gocognit
    # - goconst
    # - gocritic
    # - gocyclo
    - godot
    - godox
    # - goerr113
    # - gofmt
    # - gofumpt
    # - goheader
    # - goimports
    # - golint
    - gomnd
    # - gomoddirectives
    # - gomodguard
    # - goprintffuncname
    # - gosec
    # - gosimple
    # - gosmopolitan
    # - govet
    # - grouper
    # - ifshort
    # - importas
    - inamedparam
    # - ineffassign
    - interfacebloat
    # - interfacer
    # - ireturn
    - lll
    # - loggercheck
    # - maintidx
    # - makezero
    # - maligned
    # - mirror
    # - misspell
    # - musttag
    # - nakedret
    - nestif
    # - nilerr
    # - nilnil
    - nlreturn
    # - noctx
    - nolintlint
    # - nonamedreturns
    # - nosnakecase
    # - nosprintfhostport
    # - paralleltest
    # - prealloc
    # - predeclared
    # - promlinter
    # - reassign
    # - revive
    # - rowserrcheck
    # - scopelint
    # - sqlclosecheck
    # - staticcheck
    # - structcheck
    # - stylecheck
    - tagalign
    - tagliatelle
    # - tenv
    # - testableexamples
    # - testpackage
    # - thelper
    # - tparallel
    # - typecheck
    # - unconvert
    # - unparam
    # - unused
    # - usestdlibvars
    # - varcheck
    # - varnamelen
    # - wastedassign
    # - whitespace
    # - wrapcheck
    - wsl
    # - zerologlint
  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  fast: true
issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false.
  # new: true
  # Show only new issues created after git revision `REV`.
  # new-from-rev: HEAD
  # Fix found issues (if it's supported by the linter).
  fix: true
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
    # Exclude `lll` issues for long lines with `go:generate`.
    - linters:
        - lll
      source: "^//go:generate "
